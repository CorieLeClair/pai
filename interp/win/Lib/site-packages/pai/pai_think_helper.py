import nltk
import random
import inflect
from nltk.corpus import wordnet


class PaiSentenceHelper:

    @staticmethod
    def sentence_generator_desc(topic, attributes):
        sentence = [topic]

        for att in attributes:
            if PaiSentenceHelper().__is_topic_accompanied(topic, sentence):
                if attributes.index(att) == len(attributes) - 1:
                    sentence.extend(["and", att])
                else:
                    if PaiSpeechTagging().is_plural(topic):
                        sentence.extend([",", att])
                    else:
                        sentence.extend([",", att])
            else:
                if PaiSpeechTagging().is_plural(topic):
                    sentence.extend(["are", att])
                else:
                    sentence.extend(["is", att])

        print(" ".join(sentence))
        return " ".join(sentence)

    @staticmethod
    def __is_topic_accompanied(topic, sentence):
        # sent = " ".join(sentence)

        try:
            if topic in sentence:
                topic_index = sentence.index(topic)
                if sentence[topic_index + 1] == "is":
                    return True
                else:
                    return False
            else:
                return False
        except IndexError:
            return False


class PaiWordNet:
    @staticmethod
    def get_syn(word):
        a = []
        syns = wordnet.synsets(word)

        for item in syns:
            a.append(item.name())

        return a


    @staticmethod
    def install_nltk_files():
        nltk.download('wordnet')

    @staticmethod
    def get_examples(word):
        a = PaiWordNet().get_syn(word)[0]
        print(a.examples()[0])


class PaiSpeechTagging:
    @staticmethod
    def get_tags(words):
        text = nltk.word_tokenize(words)
        return nltk.pos_tag(text)

    @staticmethod
    def find_nouns_all(messages):
        noun_list = []

        for item in messages:
            for tag in PaiSpeechTagging().get_tags(item):
                if tag[1] == "NNP" and len(list(tag[0])) > 1:
                    noun_list.append(tag[0])

        return noun_list

    @staticmethod
    def find_noun(message):
        noun_list = []

        for tag in PaiSpeechTagging().get_tags(message):
            if tag[1] == "NN" and len(list(tag[0])) > 1:
                noun_list.append(tag[0])

        return noun_list

    @staticmethod
    def find_adj(message):
        adj_list = []

        for tag in PaiSpeechTagging().get_tags(message):
            if tag[1] == "JJ" and len(list(tag[0])) > 1:
                adj_list.append(tag[0])

        return adj_list

    @staticmethod
    def get_random_noun(messages):
        return random.choice(messages)

    # helper functions

    @staticmethod
    def is_common_noun(word):
        tag = PaiSpeechTagging().get_tags(word)
        if tag[1] == "NN":
            return True
        else:
            return False

    @staticmethod
    def is_proper_noun(word):
        tag = PaiSpeechTagging().get_tags(word)
        if tag[1] == "NNP":
            return True
        else:
            return False

    @staticmethod
    def is_adj(word):
        tag = PaiSpeechTagging().get_tags(word)
        if tag[1] == "JJ":
            return True
        else:
            return False

    @staticmethod
    def is_verb(word):
        tag = PaiSpeechTagging().get_tags(word)
        if tag[1] == "VBZ":
            return True
        else:
            return False

    @staticmethod
    def is_plural(word):
        inflecter = inflect.engine()

        return inflecter.singular_noun(word)
